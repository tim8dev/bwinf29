println("# Die Beispiele aus der Dokumentation folgen nun.")
println("################## Aufgabe 1 ##################")
println("")
println("## 4.1 Kleines Beispiel ")
  val kisten = ( 6 x  6 x  2) :: (6 x 4 x 2) :: (6 x 6 x 4) :: ( 8 x  8 x  8) :: (8 x 8 x 6) :: (6 x 4 x 2) :: (10 x 10 x 10) :: Nil
  println("### Das Gesamtvolumen der Kisten")
  val v = kisten.map(_.v).sum
println("")
  println("### OptimalPacker ")
    val optKss = OptimalPacker packe kisten
    println("\nAnzahl berechneter Kistensaetze")
    val anzahl = optKss.size
    val opt = OptimalPacker min kisten
    val v = opt.v
  println("### OptimalPacker Ende ")
println("")
  println("### AufteilenderPacker ")
    val auf = AufteilenderPacker(4) min kisten
    val v = auf.v
  println("### AufteilenderPacker Ende ")
println("")
  println("### OfflinePacker ")
    val off = OfflinePacker() min kisten
    val v = off.v
  println("### OfflinePacker Ende ")
println("## 4.1 Ende")
println("")
println("## 4.2 Algorithmus-Vergleich")
  def kisten(anzahl: Int) =
    () => StandardKisten.zufallKisten(80,80,80) take anzahl toList
println("")
  println("### Anschliessend wird nur mit den kleinen und mittleren Anzahlen Kisten getestet.")
  println("### Ausserdem werden die grossen Kisten hier ausgelassen.")
  println("### Zusaetzlich werden alle Wiederholungen auf ein Zehntel")
  println("### gegenueber den abgedruckten Beispielen reduziert.")
println("")
  println("### OptimalPacker ")
    println("#### Kleine Anzahlen")
      println("##### 8 Kisten")
    val (optKd, optZeit) = KUtils.bench(OptimalPacker, kisten(8), 100, verbose = false)
      println("##### 10 Kisten")
    val (optKd, optZeit) = KUtils.bench(OptimalPacker, kisten(10), 100, verbose = false)
      println("##### 12 Kisten")
    val (optKd, optZeit) = KUtils.bench(OptimalPacker, kisten(12), 10, verbose = false)
  println("### OptimalPacker Ende ")
println("")
  println("### AufteilenderPacker ")
    println("#### Kleine Anzahlen")
      println("##### t = n/2 ")
      println("###### 8 Kisten")
      val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(4), kisten(8), 100, verbose = false)
      println("###### 10 Kisten")
      val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(5), kisten(10), 100, verbose = false)
      println("###### 12 Kisten")
      val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(6), kisten(12), 100, verbose = false)
      println("##### t = 4 ")
      println("###### 10 Kisten")
      val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(4), kisten(10), 100, verbose = false)
      println("###### 12 Kisten")
      val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(4), kisten(12), 100, verbose = false)
    println("#### Mittlere Anzahlen")
      println("##### t = 8")
        println("###### 88 Kisten")
	val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(8), kisten(88), 26, verbose = false)
        println("###### 100 Kisten")
	val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(8), kisten(100), 26, verbose = false)
        println("###### 128 Kisten")
	val (aufKd, aufZeit) = KUtils.bench(AufteilenderPacker(8), kisten(128), 26, verbose = false)
      println("##### t = 10 ausgelassen")
  println("### AufteilenderPacker Ende ")
  println("")
  println("### OfflinePacker ")
    println("#### Kleine Anzahlen")
      println("##### 8 Kisten")
    val (offKd, offZeit) = KUtils.bench(OfflinePacker(), kisten(8), 100, verbose = false)
      println("##### 10 Kisten")
    val (offKd, offZeit) = KUtils.bench(OfflinePacker(), kisten(10), 100, verbose = false)
      println("##### 12 Kisten")
    val (offKd, offZeit) = KUtils.bench(OfflinePacker(), kisten(12), 100, verbose = false)
    println("#### Mittlere Anzahlen")
        println("##### 88 Kisten")
    val (offKd, offZeit) = KUtils.bench(OfflinePacker(), kisten(88), 26, verbose = false)
        println("##### 100 Kisten")
    val (offKd, offZeit) = KUtils.bench(OfflinePacker(), kisten(100), 26, verbose = false)
        println("##### 128 Kisten")
    val (offKd, offZeit) = KUtils.bench(OfflinePacker(), kisten(128), 26, verbose = false)
  println("### OfflinePacker Ende ")
println("## 4.2 Ende ")
println("")