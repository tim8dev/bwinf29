println("# Die Beispiele aus der Dokumentation folgen nun.")
println("################## Aufgabe 2 ##################")
println("")
println("## 4.1 Beispiel aus der Aufgabenstellung: ")
  val perm = Seq(4,3,2,1)
  val verified = Utils demonstrate perm
println("## 4.1 Ende")
println("")
println("## 4.2 Spezialfaelle")
println("")
  println("### 4.2.1 Ã„quivalenzklassen")
    val perm = Seq(2,1,4,3)
    val verified = Utils demonstrate perm
  println("### 4.2.1 Ende ")
println("")
  println("### 4.2.2 Zyklen in Zyklen in Zyklen")
    val perm = Seq(14 , 7 , 4 , 3 , 6 , 5 , 2 , 13 , 10 , 9 , 12 , 11 , 8 , 1)
    val verified = Utils demonstrate perm
  println("### 4.2.2 Ende ")
println("")
  println("### 4.2.3 Identitaet")
    val perm = (1 to 20) // Identitaet erzeugen
    val verified = Utils demonstrate perm
  println("### 4.2.3 Ende ")
println("")
println("## 4.2 Ende ")
println("")
println("## 4.3 Zufaellig erzeugte Permutationen")
println("  Achtung! Ausgabe kann von Ausfuehrung zu Ausfuehrung variieren!")
println("")
  println("### 1. Beispiel")
    val verified = Utils.demonstrate(20, print = true)
  println("### 1. Beispiel Ende ")
println("")
  println("### 2. Beispiel")
    val verified = Utils.demonstrate(20, print = true)
  println("### 2. Beispiel Ende ")
println("")
println("## 4.3 Ende ")
println("")
println("## 4.4 Demonstration der Skalierbarkeit")
println("  Achtung! Ausgabe kann von Ausfuehrung zu Ausfuehrung variieren!")
println("  Achtung! Die Verifizierung kann laenger (mehrere Minuten) dauern, wirklich fortfahren?")
println("Zum Fortfahren 'ja' eingeben, zum Abbrechen 'nein'")
val continue = readLine()
if(continue.startsWith("j")) {
  println("Berechnung startet...")
  val verified = Utils.demonstrate(math.pow(2,22).toInt, false)
}
println("")
println("## 4.4 Ende ")